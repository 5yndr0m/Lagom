#!/bin/bash

# Rofi Setup Script for Hyprland
# This script sets up all the Rofi modules and keybindings

set -e

ROFI_DIR="$HOME/.config/rofi"
SCRIPTS_DIR="$ROFI_DIR/scripts"
THEMES_DIR="$ROFI_DIR/themes"
HYPR_CONFIG="$HOME/.config/hypr/hyprland.conf"

echo "🚀 Setting up Rofi modules for Hyprland..."

# Create directories
mkdir -p "$SCRIPTS_DIR"
mkdir -p "$THEMES_DIR"
mkdir -p "$HOME/Pictures/Wallpapers"

echo "📁 Created directories"

# Set executable permissions for scripts
chmod +x "$SCRIPTS_DIR"/*.sh 2>/dev/null || true

echo "🔧 Set script permissions"

# Check for required dependencies
echo "🔍 Checking dependencies..."

missing_deps=()

# Core dependencies
command -v rofi >/dev/null || missing_deps+=("rofi")
command -v nmcli >/dev/null || missing_deps+=("networkmanager")
command -v notify-send >/dev/null || missing_deps+=("libnotify")

# Optional but recommended
command -v matugen >/dev/null || echo "⚠️  matugen not found - install for color theming"
command -v swww >/dev/null || command -v swaybg >/dev/null || command -v hyprpaper >/dev/null || echo "⚠️  No wallpaper daemon found - install swww, swaybg, or hyprpaper"

if [ ${#missing_deps[@]} -ne 0 ]; then
    echo "❌ Missing required dependencies: ${missing_deps[*]}"
    echo "Please install them first:"
    echo "  sudo pacman -S ${missing_deps[*]}"
    exit 1
fi

echo "✅ All required dependencies found"

# Generate Hyprland keybindings
cat > "$HOME/.rofi_keybindings.conf" << 'EOF'
# Rofi Keybindings for Hyprland
# Add these to your hyprland.conf file

# App Launcher
bind = SUPER, SPACE, exec, ~/.config/rofi/scripts/launcher.sh

# WiFi Manager
bind = SUPER, W, exec, ~/.config/rofi/scripts/wifi.sh

# SSH Manager
bind = SUPER, S, exec, ~/.config/rofi/scripts/ssh.sh

# Wallpaper Manager
bind = SUPER, P, exec, ~/.config/rofi/scripts/wallpaper.sh

# Alternative bindings
bind = SUPER, D, exec, ~/.config/rofi/scripts/launcher.sh
bind = SUPER SHIFT, W, exec, ~/.config/rofi/scripts/wifi.sh
bind = SUPER SHIFT, S, exec, ~/.config/rofi/scripts/ssh.sh
bind = SUPER SHIFT, P, exec, ~/.config/rofi/scripts/wallpaper.sh
EOF

echo "⌨️  Generated keybinding configuration"

# Check if Hyprland config exists and suggest adding keybindings
if [ -f "$HYPR_CONFIG" ]; then
    if ! grep -q "rofi/scripts" "$HYPR_CONFIG"; then
        echo ""
        echo "📝 To complete setup, add these keybindings to your hyprland.conf:"
        echo ""
        cat "$HOME/.rofi_keybindings.conf"
        echo ""
        echo "Or run: cat ~/.rofi_keybindings.conf >> ~/.config/hypr/hyprland.conf"
    else
        echo "✅ Rofi keybindings already present in hyprland.conf"
    fi
fi

# Create sample matugen template
cat > "$THEMES_DIR/base.rasi.template" << 'EOF'
/*
 * Rofi Base Style - Matugen Template
 * This is the template file for Matugen to generate colors
 * The actual base.rasi will be generated by Matugen
 */

* {
    primary: {{colors.primary.default.hex}};
    primary-fixed: {{colors.primary_fixed.default.hex}};
    primary-fixed-dim: {{colors.primary_fixed_dim.default.hex}};
    on-primary: {{colors.on_primary.default.hex}};
    on-primary-fixed: {{colors.on_primary_fixed.default.hex}};
    on-primary-fixed-variant: {{colors.on_primary_fixed_variant.default.hex}};
    primary-container: {{colors.primary_container.default.hex}};
    on-primary-container: {{colors.on_primary_container.default.hex}};
    secondary: {{colors.secondary.default.hex}};
    secondary-fixed: {{colors.secondary_fixed.default.hex}};
    secondary-fixed-dim: {{colors.secondary_fixed_dim.default.hex}};
    on-secondary: {{colors.on_secondary.default.hex}};
    on-secondary-fixed: {{colors.on_secondary_fixed.default.hex}};
    on-secondary-fixed-variant: {{colors.on_secondary_fixed_variant.default.hex}};
    secondary-container: {{colors.secondary_container.default.hex}};
    on-secondary-container: {{colors.on_secondary_container.default.hex}};
    tertiary: {{colors.tertiary.default.hex}};
    tertiary-fixed: {{colors.tertiary_fixed.default.hex}};
    tertiary-fixed-dim: {{colors.tertiary_fixed_dim.default.hex}};
    on-tertiary: {{colors.on_tertiary.default.hex}};
    on-tertiary-fixed: {{colors.on_tertiary_fixed.default.hex}};
    on-tertiary-fixed-variant: {{colors.on_tertiary_fixed_variant.default.hex}};
    tertiary-container: {{colors.tertiary_container.default.hex}};
    on-tertiary-container: {{colors.on_tertiary_container.default.hex}};
    error: {{colors.error.default.hex}};
    on-error: {{colors.on_error.default.hex}};
    error-container: {{colors.error_container.default.hex}};
    on-error-container: {{colors.on_error_container.default.hex}};
    surface: {{colors.surface.default.hex}};
    on-surface: {{colors.on_surface.default.hex}};
    on-surface-variant: {{colors.on_surface_variant.default.hex}};
    outline: {{colors.outline.default.hex}};
    outline-variant: {{colors.outline_variant.default.hex}};
    shadow: {{colors.shadow.default.hex}};
    scrim: {{colors.scrim.default.hex}};
    inverse-surface: {{colors.inverse_surface.default.hex}};
    inverse-on-surface: {{colors.inverse_on_surface.default.hex}};
    inverse-primary: {{colors.inverse_primary.default.hex}};
    surface-dim: {{colors.surface_dim.default.hex}};
    surface-bright: {{colors.surface_bright.default.hex}};
    surface-container-lowest: {{colors.surface_container_lowest.default.hex}};
    surface-container-low: {{colors.surface_container_low.default.hex}};
    surface-container: {{colors.surface_container.default.hex}};
    surface-container-high: {{colors.surface_container_high.default.hex}};
    surface-container-highest: {{colors.surface_container_highest.default.hex}};

    /* Base styling */
    font: "Open Sans 12";
    background-color: transparent;
    text-color: @on-surface;

    /* Dimensions */
    border-radius: 20px;
    margin: 0;
    padding: 0;
    spacing: 0;
}

window {
    location: center;
    anchor: center;
    fullscreen: false;
    width: 600px;
    background-color: @surface-container;
    border: 2px solid @outline-variant;
    border-radius: 20px;
    children: [ "mainbox" ];
}

mainbox {
    enabled: true;
    spacing: 0;
    background-color: transparent;
    children: [ "inputbar", "listview" ];
}

inputbar {
    enabled: true;
    spacing: 12px;
    padding: 20px;
    background-color: @surface-container-high;
    text-color: @on-surface;
    border: 0 0 2px 0;
    border-color: @outline-variant;
    children: [ "prompt", "entry" ];
}

prompt {
    enabled: true;
    background-color: transparent;
    text-color: @primary;
    font: "Open Sans Bold 14";
}

entry {
    enabled: true;
    background-color: transparent;
    text-color: @on-surface;
    cursor: text;
    placeholder: "Search...";
    placeholder-color: @on-surface-variant;
}

listview {
    enabled: true;
    columns: 1;
    lines: 8;
    cycle: true;
    dynamic: true;
    scrollbar: false;
    layout: vertical;
    reverse: false;
    fixed-height: true;
    fixed-columns: true;
    spacing: 0;
    background-color: transparent;
    padding: 0;
}

element {
    enabled: true;
    padding: 16px 20px;
    background-color: transparent;
    text-color: @on-surface;
    cursor: pointer;
    spacing: 12px;
    children: [ "element-icon", "element-text" ];
}

element normal.normal {
    background-color: transparent;
    text-color: @on-surface;
}

element selected.normal {
    background-color: @primary-container;
    text-color: @on-primary-container;
    border-radius: 12px;
}

element-icon {
    background-color: transparent;
    size: 24px;
    cursor: inherit;
}

element-text {
    background-color: transparent;
    text-color: inherit;
    cursor: inherit;
    vertical-align: 0.5;
    horizontal-align: 0.0;
    font: "Open Sans 12";
}

scrollbar {
    width: 4px;
    border: 0;
    handle-color: @primary;
    handle-width: 4px;
    padding: 0;
}
EOF

echo "📄 Created Matugen template"

# Create a sample matugen config if it doesn't exist
MATUGEN_CONFIG="$HOME/.config/matugen/config.toml"
if [ ! -f "$MATUGEN_CONFIG" ]; then
    mkdir -p "$(dirname "$MATUGEN_CONFIG")"
    cat > "$MATUGEN_CONFIG" << 'EOF'
[config]
reload_apps = true
reload_apps_list = ["waybar", "rofi"]

[[config.templates]]
input_path = "~/.config/rofi/themes/base.rasi.template"
output_path = "~/.config/rofi/themes/base.rasi"

[[config.templates]]
input_path = "~/.config/waybar/style.css.template"
output_path = "~/.config/waybar/style.css"
EOF
    echo "📄 Created sample Matugen config"
fi

echo ""
echo "🎉 Rofi setup complete!"
echo ""
echo "📋 Summary:"
echo "  • App Launcher: Super + Space (or Super + D)"
echo "  • WiFi Manager: Super + W"
echo "  • SSH Manager: Super + S"
echo "  • Wallpaper Manager: Super + P"
echo ""
echo "📝 Next steps:"
echo "  1. Add keybindings to your hyprland.conf (see ~/.rofi_keybindings.conf)"
echo "  2. Install Open Sans font: sudo pacman -S ttf-opensans"
echo "  3. Add wallpapers to ~/Pictures/Wallpapers/"
echo "  4. Install matugen for color theming: yay -S matugen"
echo "  5. Install a wallpaper daemon: sudo pacman -S swww"
echo ""
echo "🚀 Ready to use! Try Super + Space to launch apps"
